// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VAF.proto

#ifndef PROTOBUF_VAF_2eproto__INCLUDED
#define PROTOBUF_VAF_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VAF_2eproto();
void protobuf_AssignDesc_VAF_2eproto();
void protobuf_ShutdownFile_VAF_2eproto();

class VAF;

// ===================================================================

class VAF : public ::google::protobuf::Message {
 public:
  VAF();
  virtual ~VAF();

  VAF(const VAF& from);

  inline VAF& operator=(const VAF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VAF& default_instance();

  void Swap(VAF* other);

  // implements Message ----------------------------------------------

  VAF* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VAF& from);
  void MergeFrom(const VAF& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string protocolo = 1;
  inline bool has_protocolo() const;
  inline void clear_protocolo();
  static const int kProtocoloFieldNumber = 1;
  inline const ::std::string& protocolo() const;
  inline void set_protocolo(const ::std::string& value);
  inline void set_protocolo(const char* value);
  inline void set_protocolo(const char* value, size_t size);
  inline ::std::string* mutable_protocolo();
  inline ::std::string* release_protocolo();
  inline void set_allocated_protocolo(::std::string* protocolo);

  // required bytes version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const void* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional uint32 Tnombrecamara = 3;
  inline bool has_tnombrecamara() const;
  inline void clear_tnombrecamara();
  static const int kTnombrecamaraFieldNumber = 3;
  inline ::google::protobuf::uint32 tnombrecamara() const;
  inline void set_tnombrecamara(::google::protobuf::uint32 value);

  // required string nombrecamara = 4;
  inline bool has_nombrecamara() const;
  inline void clear_nombrecamara();
  static const int kNombrecamaraFieldNumber = 4;
  inline const ::std::string& nombrecamara() const;
  inline void set_nombrecamara(const ::std::string& value);
  inline void set_nombrecamara(const char* value);
  inline void set_nombrecamara(const char* value, size_t size);
  inline ::std::string* mutable_nombrecamara();
  inline ::std::string* release_nombrecamara();
  inline void set_allocated_nombrecamara(::std::string* nombrecamara);

  // optional uint32 TnombrePC = 5;
  inline bool has_tnombrepc() const;
  inline void clear_tnombrepc();
  static const int kTnombrePCFieldNumber = 5;
  inline ::google::protobuf::uint32 tnombrepc() const;
  inline void set_tnombrepc(::google::protobuf::uint32 value);

  // required string nombrePC = 6;
  inline bool has_nombrepc() const;
  inline void clear_nombrepc();
  static const int kNombrePCFieldNumber = 6;
  inline const ::std::string& nombrepc() const;
  inline void set_nombrepc(const ::std::string& value);
  inline void set_nombrepc(const char* value);
  inline void set_nombrepc(const char* value, size_t size);
  inline ::std::string* mutable_nombrepc();
  inline ::std::string* release_nombrepc();
  inline void set_allocated_nombrepc(::std::string* nombrepc);

  // required string timestamp = 7;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 7;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // optional uint32 TImagen = 8;
  inline bool has_timagen() const;
  inline void clear_timagen();
  static const int kTImagenFieldNumber = 8;
  inline ::google::protobuf::uint32 timagen() const;
  inline void set_timagen(::google::protobuf::uint32 value);

  // required bytes imagen = 9;
  inline bool has_imagen() const;
  inline void clear_imagen();
  static const int kImagenFieldNumber = 9;
  inline const ::std::string& imagen() const;
  inline void set_imagen(const ::std::string& value);
  inline void set_imagen(const char* value);
  inline void set_imagen(const void* value, size_t size);
  inline ::std::string* mutable_imagen();
  inline ::std::string* release_imagen();
  inline void set_allocated_imagen(::std::string* imagen);

  // optional string datestamp = 10;
  inline bool has_datestamp() const;
  inline void clear_datestamp();
  static const int kDatestampFieldNumber = 10;
  inline const ::std::string& datestamp() const;
  inline void set_datestamp(const ::std::string& value);
  inline void set_datestamp(const char* value);
  inline void set_datestamp(const char* value, size_t size);
  inline ::std::string* mutable_datestamp();
  inline ::std::string* release_datestamp();
  inline void set_allocated_datestamp(::std::string* datestamp);

  // @@protoc_insertion_point(class_scope:VAF)
 private:
  inline void set_has_protocolo();
  inline void clear_has_protocolo();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_tnombrecamara();
  inline void clear_has_tnombrecamara();
  inline void set_has_nombrecamara();
  inline void clear_has_nombrecamara();
  inline void set_has_tnombrepc();
  inline void clear_has_tnombrepc();
  inline void set_has_nombrepc();
  inline void clear_has_nombrepc();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_timagen();
  inline void clear_has_timagen();
  inline void set_has_imagen();
  inline void clear_has_imagen();
  inline void set_has_datestamp();
  inline void clear_has_datestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* protocolo_;
  ::std::string* version_;
  ::std::string* nombrecamara_;
  ::google::protobuf::uint32 tnombrecamara_;
  ::google::protobuf::uint32 tnombrepc_;
  ::std::string* nombrepc_;
  ::std::string* timestamp_;
  ::std::string* imagen_;
  ::std::string* datestamp_;
  ::google::protobuf::uint32 timagen_;
  friend void  protobuf_AddDesc_VAF_2eproto();
  friend void protobuf_AssignDesc_VAF_2eproto();
  friend void protobuf_ShutdownFile_VAF_2eproto();

  void InitAsDefaultInstance();
  static VAF* default_instance_;
};
// ===================================================================


// ===================================================================

// VAF

// required string protocolo = 1;
inline bool VAF::has_protocolo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VAF::set_has_protocolo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VAF::clear_has_protocolo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VAF::clear_protocolo() {
  if (protocolo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocolo_->clear();
  }
  clear_has_protocolo();
}
inline const ::std::string& VAF::protocolo() const {
  // @@protoc_insertion_point(field_get:VAF.protocolo)
  return *protocolo_;
}
inline void VAF::set_protocolo(const ::std::string& value) {
  set_has_protocolo();
  if (protocolo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocolo_ = new ::std::string;
  }
  protocolo_->assign(value);
  // @@protoc_insertion_point(field_set:VAF.protocolo)
}
inline void VAF::set_protocolo(const char* value) {
  set_has_protocolo();
  if (protocolo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocolo_ = new ::std::string;
  }
  protocolo_->assign(value);
  // @@protoc_insertion_point(field_set_char:VAF.protocolo)
}
inline void VAF::set_protocolo(const char* value, size_t size) {
  set_has_protocolo();
  if (protocolo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocolo_ = new ::std::string;
  }
  protocolo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VAF.protocolo)
}
inline ::std::string* VAF::mutable_protocolo() {
  set_has_protocolo();
  if (protocolo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocolo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VAF.protocolo)
  return protocolo_;
}
inline ::std::string* VAF::release_protocolo() {
  clear_has_protocolo();
  if (protocolo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = protocolo_;
    protocolo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VAF::set_allocated_protocolo(::std::string* protocolo) {
  if (protocolo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete protocolo_;
  }
  if (protocolo) {
    set_has_protocolo();
    protocolo_ = protocolo;
  } else {
    clear_has_protocolo();
    protocolo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VAF.protocolo)
}

// required bytes version = 2;
inline bool VAF::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VAF::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VAF::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VAF::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& VAF::version() const {
  // @@protoc_insertion_point(field_get:VAF.version)
  return *version_;
}
inline void VAF::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:VAF.version)
}
inline void VAF::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:VAF.version)
}
inline void VAF::set_version(const void* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VAF.version)
}
inline ::std::string* VAF::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VAF.version)
  return version_;
}
inline ::std::string* VAF::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VAF::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VAF.version)
}

// optional uint32 Tnombrecamara = 3;
inline bool VAF::has_tnombrecamara() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VAF::set_has_tnombrecamara() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VAF::clear_has_tnombrecamara() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VAF::clear_tnombrecamara() {
  tnombrecamara_ = 0u;
  clear_has_tnombrecamara();
}
inline ::google::protobuf::uint32 VAF::tnombrecamara() const {
  // @@protoc_insertion_point(field_get:VAF.Tnombrecamara)
  return tnombrecamara_;
}
inline void VAF::set_tnombrecamara(::google::protobuf::uint32 value) {
  set_has_tnombrecamara();
  tnombrecamara_ = value;
  // @@protoc_insertion_point(field_set:VAF.Tnombrecamara)
}

// required string nombrecamara = 4;
inline bool VAF::has_nombrecamara() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VAF::set_has_nombrecamara() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VAF::clear_has_nombrecamara() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VAF::clear_nombrecamara() {
  if (nombrecamara_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nombrecamara_->clear();
  }
  clear_has_nombrecamara();
}
inline const ::std::string& VAF::nombrecamara() const {
  // @@protoc_insertion_point(field_get:VAF.nombrecamara)
  return *nombrecamara_;
}
inline void VAF::set_nombrecamara(const ::std::string& value) {
  set_has_nombrecamara();
  if (nombrecamara_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nombrecamara_ = new ::std::string;
  }
  nombrecamara_->assign(value);
  // @@protoc_insertion_point(field_set:VAF.nombrecamara)
}
inline void VAF::set_nombrecamara(const char* value) {
  set_has_nombrecamara();
  if (nombrecamara_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nombrecamara_ = new ::std::string;
  }
  nombrecamara_->assign(value);
  // @@protoc_insertion_point(field_set_char:VAF.nombrecamara)
}
inline void VAF::set_nombrecamara(const char* value, size_t size) {
  set_has_nombrecamara();
  if (nombrecamara_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nombrecamara_ = new ::std::string;
  }
  nombrecamara_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VAF.nombrecamara)
}
inline ::std::string* VAF::mutable_nombrecamara() {
  set_has_nombrecamara();
  if (nombrecamara_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nombrecamara_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VAF.nombrecamara)
  return nombrecamara_;
}
inline ::std::string* VAF::release_nombrecamara() {
  clear_has_nombrecamara();
  if (nombrecamara_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nombrecamara_;
    nombrecamara_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VAF::set_allocated_nombrecamara(::std::string* nombrecamara) {
  if (nombrecamara_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nombrecamara_;
  }
  if (nombrecamara) {
    set_has_nombrecamara();
    nombrecamara_ = nombrecamara;
  } else {
    clear_has_nombrecamara();
    nombrecamara_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VAF.nombrecamara)
}

// optional uint32 TnombrePC = 5;
inline bool VAF::has_tnombrepc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VAF::set_has_tnombrepc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VAF::clear_has_tnombrepc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VAF::clear_tnombrepc() {
  tnombrepc_ = 0u;
  clear_has_tnombrepc();
}
inline ::google::protobuf::uint32 VAF::tnombrepc() const {
  // @@protoc_insertion_point(field_get:VAF.TnombrePC)
  return tnombrepc_;
}
inline void VAF::set_tnombrepc(::google::protobuf::uint32 value) {
  set_has_tnombrepc();
  tnombrepc_ = value;
  // @@protoc_insertion_point(field_set:VAF.TnombrePC)
}

// required string nombrePC = 6;
inline bool VAF::has_nombrepc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VAF::set_has_nombrepc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VAF::clear_has_nombrepc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VAF::clear_nombrepc() {
  if (nombrepc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nombrepc_->clear();
  }
  clear_has_nombrepc();
}
inline const ::std::string& VAF::nombrepc() const {
  // @@protoc_insertion_point(field_get:VAF.nombrePC)
  return *nombrepc_;
}
inline void VAF::set_nombrepc(const ::std::string& value) {
  set_has_nombrepc();
  if (nombrepc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nombrepc_ = new ::std::string;
  }
  nombrepc_->assign(value);
  // @@protoc_insertion_point(field_set:VAF.nombrePC)
}
inline void VAF::set_nombrepc(const char* value) {
  set_has_nombrepc();
  if (nombrepc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nombrepc_ = new ::std::string;
  }
  nombrepc_->assign(value);
  // @@protoc_insertion_point(field_set_char:VAF.nombrePC)
}
inline void VAF::set_nombrepc(const char* value, size_t size) {
  set_has_nombrepc();
  if (nombrepc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nombrepc_ = new ::std::string;
  }
  nombrepc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VAF.nombrePC)
}
inline ::std::string* VAF::mutable_nombrepc() {
  set_has_nombrepc();
  if (nombrepc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nombrepc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VAF.nombrePC)
  return nombrepc_;
}
inline ::std::string* VAF::release_nombrepc() {
  clear_has_nombrepc();
  if (nombrepc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nombrepc_;
    nombrepc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VAF::set_allocated_nombrepc(::std::string* nombrepc) {
  if (nombrepc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nombrepc_;
  }
  if (nombrepc) {
    set_has_nombrepc();
    nombrepc_ = nombrepc;
  } else {
    clear_has_nombrepc();
    nombrepc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VAF.nombrePC)
}

// required string timestamp = 7;
inline bool VAF::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VAF::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VAF::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VAF::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& VAF::timestamp() const {
  // @@protoc_insertion_point(field_get:VAF.timestamp)
  return *timestamp_;
}
inline void VAF::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
  // @@protoc_insertion_point(field_set:VAF.timestamp)
}
inline void VAF::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
  // @@protoc_insertion_point(field_set_char:VAF.timestamp)
}
inline void VAF::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VAF.timestamp)
}
inline ::std::string* VAF::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VAF.timestamp)
  return timestamp_;
}
inline ::std::string* VAF::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VAF::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VAF.timestamp)
}

// optional uint32 TImagen = 8;
inline bool VAF::has_timagen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VAF::set_has_timagen() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VAF::clear_has_timagen() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VAF::clear_timagen() {
  timagen_ = 0u;
  clear_has_timagen();
}
inline ::google::protobuf::uint32 VAF::timagen() const {
  // @@protoc_insertion_point(field_get:VAF.TImagen)
  return timagen_;
}
inline void VAF::set_timagen(::google::protobuf::uint32 value) {
  set_has_timagen();
  timagen_ = value;
  // @@protoc_insertion_point(field_set:VAF.TImagen)
}

// required bytes imagen = 9;
inline bool VAF::has_imagen() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VAF::set_has_imagen() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VAF::clear_has_imagen() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VAF::clear_imagen() {
  if (imagen_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagen_->clear();
  }
  clear_has_imagen();
}
inline const ::std::string& VAF::imagen() const {
  // @@protoc_insertion_point(field_get:VAF.imagen)
  return *imagen_;
}
inline void VAF::set_imagen(const ::std::string& value) {
  set_has_imagen();
  if (imagen_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagen_ = new ::std::string;
  }
  imagen_->assign(value);
  // @@protoc_insertion_point(field_set:VAF.imagen)
}
inline void VAF::set_imagen(const char* value) {
  set_has_imagen();
  if (imagen_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagen_ = new ::std::string;
  }
  imagen_->assign(value);
  // @@protoc_insertion_point(field_set_char:VAF.imagen)
}
inline void VAF::set_imagen(const void* value, size_t size) {
  set_has_imagen();
  if (imagen_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagen_ = new ::std::string;
  }
  imagen_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VAF.imagen)
}
inline ::std::string* VAF::mutable_imagen() {
  set_has_imagen();
  if (imagen_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagen_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VAF.imagen)
  return imagen_;
}
inline ::std::string* VAF::release_imagen() {
  clear_has_imagen();
  if (imagen_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imagen_;
    imagen_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VAF::set_allocated_imagen(::std::string* imagen) {
  if (imagen_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagen_;
  }
  if (imagen) {
    set_has_imagen();
    imagen_ = imagen;
  } else {
    clear_has_imagen();
    imagen_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VAF.imagen)
}

// optional string datestamp = 10;
inline bool VAF::has_datestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VAF::set_has_datestamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VAF::clear_has_datestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VAF::clear_datestamp() {
  if (datestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datestamp_->clear();
  }
  clear_has_datestamp();
}
inline const ::std::string& VAF::datestamp() const {
  // @@protoc_insertion_point(field_get:VAF.datestamp)
  return *datestamp_;
}
inline void VAF::set_datestamp(const ::std::string& value) {
  set_has_datestamp();
  if (datestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datestamp_ = new ::std::string;
  }
  datestamp_->assign(value);
  // @@protoc_insertion_point(field_set:VAF.datestamp)
}
inline void VAF::set_datestamp(const char* value) {
  set_has_datestamp();
  if (datestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datestamp_ = new ::std::string;
  }
  datestamp_->assign(value);
  // @@protoc_insertion_point(field_set_char:VAF.datestamp)
}
inline void VAF::set_datestamp(const char* value, size_t size) {
  set_has_datestamp();
  if (datestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datestamp_ = new ::std::string;
  }
  datestamp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VAF.datestamp)
}
inline ::std::string* VAF::mutable_datestamp() {
  set_has_datestamp();
  if (datestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datestamp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VAF.datestamp)
  return datestamp_;
}
inline ::std::string* VAF::release_datestamp() {
  clear_has_datestamp();
  if (datestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = datestamp_;
    datestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VAF::set_allocated_datestamp(::std::string* datestamp) {
  if (datestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete datestamp_;
  }
  if (datestamp) {
    set_has_datestamp();
    datestamp_ = datestamp;
  } else {
    clear_has_datestamp();
    datestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VAF.datestamp)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VAF_2eproto__INCLUDED
