// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VAF.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VAF.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* VAF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VAF_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VAF_2eproto() {
  protobuf_AddDesc_VAF_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VAF.proto");
  GOOGLE_CHECK(file != NULL);
  VAF_descriptor_ = file->message_type(0);
  static const int VAF_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAF, protocolo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAF, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAF, tnombrecamara_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAF, nombrecamara_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAF, tnombrepc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAF, nombrepc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAF, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAF, timagen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAF, imagen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAF, datestamp_),
  };
  VAF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VAF_descriptor_,
      VAF::default_instance_,
      VAF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VAF));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VAF_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VAF_descriptor_, &VAF::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VAF_2eproto() {
  delete VAF::default_instance_;
  delete VAF_reflection_;
}

void protobuf_AddDesc_VAF_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tVAF.proto\"\302\001\n\003VAF\022\021\n\tprotocolo\030\001 \002(\t\022\017"
    "\n\007version\030\002 \002(\014\022\025\n\rTnombrecamara\030\003 \001(\r\022\024"
    "\n\014nombrecamara\030\004 \002(\t\022\021\n\tTnombrePC\030\005 \001(\r\022"
    "\020\n\010nombrePC\030\006 \002(\t\022\021\n\ttimestamp\030\007 \002(\t\022\017\n\007"
    "TImagen\030\010 \001(\r\022\016\n\006imagen\030\t \002(\014\022\021\n\tdatesta"
    "mp\030\n \001(\t", 208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VAF.proto", &protobuf_RegisterTypes);
  VAF::default_instance_ = new VAF();
  VAF::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VAF_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VAF_2eproto {
  StaticDescriptorInitializer_VAF_2eproto() {
    protobuf_AddDesc_VAF_2eproto();
  }
} static_descriptor_initializer_VAF_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VAF::kProtocoloFieldNumber;
const int VAF::kVersionFieldNumber;
const int VAF::kTnombrecamaraFieldNumber;
const int VAF::kNombrecamaraFieldNumber;
const int VAF::kTnombrePCFieldNumber;
const int VAF::kNombrePCFieldNumber;
const int VAF::kTimestampFieldNumber;
const int VAF::kTImagenFieldNumber;
const int VAF::kImagenFieldNumber;
const int VAF::kDatestampFieldNumber;
#endif  // !_MSC_VER

VAF::VAF()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VAF)
}

void VAF::InitAsDefaultInstance() {
}

VAF::VAF(const VAF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VAF)
}

void VAF::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protocolo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tnombrecamara_ = 0u;
  nombrecamara_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tnombrepc_ = 0u;
  nombrepc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timagen_ = 0u;
  imagen_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VAF::~VAF() {
  // @@protoc_insertion_point(destructor:VAF)
  SharedDtor();
}

void VAF::SharedDtor() {
  if (protocolo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete protocolo_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (nombrecamara_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nombrecamara_;
  }
  if (nombrepc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nombrepc_;
  }
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (imagen_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagen_;
  }
  if (datestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete datestamp_;
  }
  if (this != default_instance_) {
  }
}

void VAF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VAF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VAF_descriptor_;
}

const VAF& VAF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VAF_2eproto();
  return *default_instance_;
}

VAF* VAF::default_instance_ = NULL;

VAF* VAF::New() const {
  return new VAF;
}

void VAF::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VAF*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(tnombrecamara_, tnombrepc_);
    if (has_protocolo()) {
      if (protocolo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        protocolo_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_nombrecamara()) {
      if (nombrecamara_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nombrecamara_->clear();
      }
    }
    if (has_nombrepc()) {
      if (nombrepc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nombrepc_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timestamp_->clear();
      }
    }
    timagen_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_imagen()) {
      if (imagen_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imagen_->clear();
      }
    }
    if (has_datestamp()) {
      if (datestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        datestamp_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VAF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VAF)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string protocolo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocolo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->protocolo().data(), this->protocolo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocolo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // required bytes version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Tnombrecamara;
        break;
      }

      // optional uint32 Tnombrecamara = 3;
      case 3: {
        if (tag == 24) {
         parse_Tnombrecamara:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tnombrecamara_)));
          set_has_tnombrecamara();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nombrecamara;
        break;
      }

      // required string nombrecamara = 4;
      case 4: {
        if (tag == 34) {
         parse_nombrecamara:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nombrecamara()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nombrecamara().data(), this->nombrecamara().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nombrecamara");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TnombrePC;
        break;
      }

      // optional uint32 TnombrePC = 5;
      case 5: {
        if (tag == 40) {
         parse_TnombrePC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tnombrepc_)));
          set_has_tnombrepc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_nombrePC;
        break;
      }

      // required string nombrePC = 6;
      case 6: {
        if (tag == 50) {
         parse_nombrePC:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nombrepc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nombrepc().data(), this->nombrepc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nombrepc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_timestamp;
        break;
      }

      // required string timestamp = 7;
      case 7: {
        if (tag == 58) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timestamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_TImagen;
        break;
      }

      // optional uint32 TImagen = 8;
      case 8: {
        if (tag == 64) {
         parse_TImagen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timagen_)));
          set_has_timagen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_imagen;
        break;
      }

      // required bytes imagen = 9;
      case 9: {
        if (tag == 74) {
         parse_imagen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagen()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_datestamp;
        break;
      }

      // optional string datestamp = 10;
      case 10: {
        if (tag == 82) {
         parse_datestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->datestamp().data(), this->datestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "datestamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VAF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VAF)
  return false;
#undef DO_
}

void VAF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VAF)
  // required string protocolo = 1;
  if (has_protocolo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocolo().data(), this->protocolo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocolo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->protocolo(), output);
  }

  // required bytes version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->version(), output);
  }

  // optional uint32 Tnombrecamara = 3;
  if (has_tnombrecamara()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tnombrecamara(), output);
  }

  // required string nombrecamara = 4;
  if (has_nombrecamara()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nombrecamara().data(), this->nombrecamara().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nombrecamara");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nombrecamara(), output);
  }

  // optional uint32 TnombrePC = 5;
  if (has_tnombrepc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tnombrepc(), output);
  }

  // required string nombrePC = 6;
  if (has_nombrepc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nombrepc().data(), this->nombrepc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nombrepc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->nombrepc(), output);
  }

  // required string timestamp = 7;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->timestamp(), output);
  }

  // optional uint32 TImagen = 8;
  if (has_timagen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->timagen(), output);
  }

  // required bytes imagen = 9;
  if (has_imagen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->imagen(), output);
  }

  // optional string datestamp = 10;
  if (has_datestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datestamp().data(), this->datestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "datestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->datestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VAF)
}

::google::protobuf::uint8* VAF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VAF)
  // required string protocolo = 1;
  if (has_protocolo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocolo().data(), this->protocolo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocolo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->protocolo(), target);
  }

  // required bytes version = 2;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->version(), target);
  }

  // optional uint32 Tnombrecamara = 3;
  if (has_tnombrecamara()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tnombrecamara(), target);
  }

  // required string nombrecamara = 4;
  if (has_nombrecamara()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nombrecamara().data(), this->nombrecamara().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nombrecamara");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nombrecamara(), target);
  }

  // optional uint32 TnombrePC = 5;
  if (has_tnombrepc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tnombrepc(), target);
  }

  // required string nombrePC = 6;
  if (has_nombrepc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nombrepc().data(), this->nombrepc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nombrepc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nombrepc(), target);
  }

  // required string timestamp = 7;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->timestamp(), target);
  }

  // optional uint32 TImagen = 8;
  if (has_timagen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->timagen(), target);
  }

  // required bytes imagen = 9;
  if (has_imagen()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->imagen(), target);
  }

  // optional string datestamp = 10;
  if (has_datestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datestamp().data(), this->datestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "datestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->datestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VAF)
  return target;
}

int VAF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string protocolo = 1;
    if (has_protocolo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocolo());
    }

    // required bytes version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

    // optional uint32 Tnombrecamara = 3;
    if (has_tnombrecamara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tnombrecamara());
    }

    // required string nombrecamara = 4;
    if (has_nombrecamara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nombrecamara());
    }

    // optional uint32 TnombrePC = 5;
    if (has_tnombrepc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tnombrepc());
    }

    // required string nombrePC = 6;
    if (has_nombrepc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nombrepc());
    }

    // required string timestamp = 7;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional uint32 TImagen = 8;
    if (has_timagen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timagen());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes imagen = 9;
    if (has_imagen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagen());
    }

    // optional string datestamp = 10;
    if (has_datestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VAF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VAF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VAF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VAF::MergeFrom(const VAF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocolo()) {
      set_protocolo(from.protocolo());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_tnombrecamara()) {
      set_tnombrecamara(from.tnombrecamara());
    }
    if (from.has_nombrecamara()) {
      set_nombrecamara(from.nombrecamara());
    }
    if (from.has_tnombrepc()) {
      set_tnombrepc(from.tnombrepc());
    }
    if (from.has_nombrepc()) {
      set_nombrepc(from.nombrepc());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_timagen()) {
      set_timagen(from.timagen());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_imagen()) {
      set_imagen(from.imagen());
    }
    if (from.has_datestamp()) {
      set_datestamp(from.datestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VAF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VAF::CopyFrom(const VAF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VAF::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000016b) != 0x0000016b) return false;

  return true;
}

void VAF::Swap(VAF* other) {
  if (other != this) {
    std::swap(protocolo_, other->protocolo_);
    std::swap(version_, other->version_);
    std::swap(tnombrecamara_, other->tnombrecamara_);
    std::swap(nombrecamara_, other->nombrecamara_);
    std::swap(tnombrepc_, other->tnombrepc_);
    std::swap(nombrepc_, other->nombrepc_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(timagen_, other->timagen_);
    std::swap(imagen_, other->imagen_);
    std::swap(datestamp_, other->datestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VAF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VAF_descriptor_;
  metadata.reflection = VAF_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
